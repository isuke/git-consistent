#!/usr/bin/env node

const path      = require('path')
const fs        = require('fs')
const _         = require('lodash')
const yaml      = require('js-yaml')
const execSync  = require('child_process').execSync
const program   = require('commander')
const prompt    = require('prompt-sync')()

const templateFileName    = '.gitcommit_template'
const definitionsFileName = '.git_consistent'
const projectRoot = execSync(`git rev-parse --show-toplevel 2> /dev/null`).toString().trim()

const version = '0.1.1'

const loadDefinitions = (path) => {
  try {
    return yaml.safeLoad(fs.readFileSync(path, 'utf8'))
  } catch (e) {
    throw e
  }
}

const setOptions = (program, definitions, terms) => {
  if (_.isEmpty(terms)) {
    return program
  } else {
    const term = terms[0]
    const valueStr = definitions[term].required ? `<${term}>` : `[${term}]`
    const defaultValue = definitions[term].required ? undefined : ''
    program.option(`--${term} ${valueStr}`, definitions[term].description, defaultValue)
    return setOptions(program, definitions, _.tail(terms))
  }
}

const createProgram = (program, definitions, terms) => {
  return setOptions(program, definitions, terms)
    .option(`-d, --dry-run`    , 'run dry-run mode')
    .option(`-i, --interactive`, 'run interactive mode')
    .version(version)
    .parse(process.argv)
}

const select = (term, definition) => {
  const header = `Select ${term}: `
  const values = _.map(definition.values, function (value) { return value.name }) // TODO: description
  const command = `echo '${values.join("\n")}' | fzf --reverse --cycle --header="${header}"`

  value = execSync(command, { stdio: ['inherit', 'pipe', 'inherit'], shell: true }).toString().trim()
  console.log(`${header}${value}`)
  return value
}

const inputString = (term, _definition) => {
  return prompt(`Enter ${term}: `)
}

const inputText = (term, _definition) => {
  console.log(`Enter ${term} multiline:`)
  let values = []
  let value = ""

  do {
    value = prompt()
    values.push(value)
  } while (!_.isEmpty(value))

  return values.join("\n")
}

const input = (term, definition) => {
  const type = definition.type
  let inputValue
  switch (type) {
    case 'enum':
      inputValue = select(term, definition)
      break
    case 'string':
      inputValue = inputString(term, definition)
      break
    case 'text':
      inputValue = inputText(term, definition)
      break
    default:
      throw new Error(`${type} is not defined.`)
  }
  checkValue(inputValue)
  return inputValue
}

const checkValue = (value) => {
  // TODO
}

const replaceTerms = (program, template, definitions, terms) => {
  if (_.isEmpty(terms)) {
    return template
  } else {
    const term = terms[0]
    const definition = definitions[term]
    template = replaceTerm(program, template, definition, term)
    return replaceTerms(program, template, definitions, _.tail(terms))
  }
}

const replaceTerm = (program, template, definition, term) => {
  let value = program[term]

  if (program.interactive) {
    if (_.isEmpty(value)) value = input(term, definition)
    // TODO: do loop if required and value is empty
  } else {
    if (_.isEmpty(value) && definition.required) throw new Error(`${term} is required.`)
  }

  return _.replace(template, `<${term}>`, value)
}

const gitCommit = (commitMessage, dryRun = false) => {
  if (dryRun) {
    console.log("-------------------------")
    console.log(commitMessage)
    console.log("-------------------------")
  } else {
    execSync(`git commit -m "${commitMessage}"`)
  }
}

const main = (program, template, definitions, terms) => {
  const commitMessage = replaceTerms(program, template, definitions, terms)
  gitCommit(commitMessage.trim(), program.dryRun)
}

//
// Main
//
const rootPath            = projectRoot === "" ? process.env.HOME : projectRoot
const templateFilePath    = path.join(rootPath, templateFileName)
const definitionsFilePath = path.join(rootPath, definitionsFileName)
const template            = fs.readFileSync(templateFilePath, 'utf8')
const definitions         = loadDefinitions(definitionsFilePath)
const terms               = _.keys(definitions)

main(createProgram(program, definitions, terms), template, definitions, terms)
