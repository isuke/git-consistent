#!/usr/bin/env node

const program    = require('commander')
const path       = require('path')
const fs         = require('fs')
const _          = require('lodash')
const execSync   = require('child_process').execSync
const yaml       = require('js-yaml')

const colors    = require('./lib/colors')
const main      = require('./lib/main')
const genConfig = require('./lib/gen-config')

const templateFileName    = '.gitcommit_template'
const definitionsFileName = '.git_consistent'

const version = '0.8.8'

//
// Functions
//
const getProjectRoot = () => {
  try {
    return execSync(`git rev-parse --show-toplevel 2> /dev/null`).toString().trim()
  } catch (_e) {
    throw new Error(`Not a git repository`)
  }
}

const loadDefinitions = (path) => {
  return yaml.safeLoad(fs.readFileSync(path, 'utf8'))
}

const setOptions = (program, definitions, terms) => {
  if (_.isEmpty(terms)) {
    return program
  } else {
    const term = terms[0]
    const definition = definitions[term]
    const type = definition.type
    const optionName = term == 'subject' ? `-m, --${term}` : `--${term}`
    const valueStr = definition.required ? `<${term}>` : `[${term}]`
    const defaultValue = definition.default
    if (! ['variable', 'branch'].includes(type)) program.option(`${optionName} ${valueStr}`, definition.description, defaultValue)
    return setOptions(program, definitions, _.tail(terms))
  }
}

//
// Main
//
try {
  program
    .option(`-d, --duet`, 'run git-duet mode')
    .option(`-D, --dry-run`, 'run dry-run mode')
    .option(`-i, --interactive`, 'run interactive mode')
    .option(`-S, --silent`, "don't show commit command")
    .option(`-t, --typo-check`, "check spell")
    .option(`--gen-config`, "generate config files")
    .version(version)

  if (process.argv.includes('--gen-config')) {
    program
      .parse(process.argv)
    genConfig(program, templateFileName, definitionsFileName)
  } else {
    const projectRoot = getProjectRoot()
    const rootPath = projectRoot === "" ? process.env.HOME : projectRoot
    const templateFilePath = path.join(rootPath, templateFileName)
    const definitionsFilePath = path.join(rootPath, definitionsFileName)
    const template = fs.readFileSync(templateFilePath, 'utf8')
    const definitions = loadDefinitions(definitionsFilePath)
    const terms = _.keys(definitions)

    setOptions(program, definitions, terms)
      .parse(process.argv)

    main(program, template, definitions, terms)
  }
} catch (e) {
  console.error(`${colors.error}${e.message}${colors.reset}`)
}
