#!/usr/bin/env node

const path      = require('path')
const fs        = require('fs')
const _         = require('lodash')
const yaml      = require('js-yaml')
const execSync  = require('child_process').execSync
const program   = require('commander')
const prompt    = require('prompt-sync')()

const templateFileName    = '.gitcommit_template'
const definitionsFileName = '.git_consistent'
const projectRoot = execSync(`git rev-parse --show-toplevel 2> /dev/null`).toString().trim()

const black   = '\u001b[30m'
const red     = '\u001b[31m'
const green   = '\u001b[32m'
const yellow  = '\u001b[33m'
const blue    = '\u001b[34m'
const magenta = '\u001b[35m'
const cyan    = '\u001b[36m'
const white   = '\u001b[37m'
const reset   = '\u001b[0m'

const messageColor = cyan
const warningColor = yellow
const errorColor = red

const version = '0.2.0'

const loadDefinitions = (path) => {
  return yaml.safeLoad(fs.readFileSync(path, 'utf8'))
}

const setOptions = (program, definitions, terms) => {
  if (_.isEmpty(terms)) {
    return program
  } else {
    const term = terms[0]
    const optionName = term == 'subject' ? `-m, --${term}` : `--${term}`
    const valueStr = definitions[term].required ? `<${term}>` : `[${term}]`
    program.option(`${optionName} ${valueStr}`, definitions[term].description)
    return setOptions(program, definitions, _.tail(terms))
  }
}

const createProgram = (program, definitions, terms) => {
  return setOptions(program, definitions, terms)
    .option(`-d, --duet`, 'run git-duet mode', false)
    .option(`-D, --dry-run`, 'run dry-run mode', false)
    .option(`-i, --interactive`, 'run interactive mode', false)
    .option(`-s, --skip-options`, 'skip not required term input (interactive mode only)', false)
    .version(version)
    .parse(process.argv)
}

const select = (term, definition) => {
  const none = "(none)"
  const header = `Select ${term}: `
  const choices = _.map(definition.values, function (value) { return `${value.name}\t${value.description}` })
  if (!definition.required) choices.unshift(`\t${none}`)
  const command = `echo '${_.replace(choices.join("\n"), "'", '"')}' | fzf --reverse --cycle --header="${header}"`

  const selectedValue = execSync(command, { stdio: ['inherit', 'pipe', 'inherit'], shell: true }).toString().trim()
  const value = selectedValue.split("\t")[0]
  const v = value === none ? '' : value
  console.log(`${header}${value}`)
  return v
}

const inputString = (term, _definition) => {
  return prompt(`${messageColor}Enter ${term}: ${reset}`)
}

const inputText = (term, _definition) => {
  console.log(`${messageColor}Enter ${term} multiline:${reset}`)
  let values = []
  let value = ""

  do {
    value = prompt()
    values.push(value)
  } while (!_.isEmpty(value))

  return values.join("\n")
}

const input = (term, definition) => {
  const type = definition.type
  let inputValue
  switch (type) {
    case 'enum':
      inputValue = select(term, definition)
      break
    case 'string':
      inputValue = inputString(term, definition)
      break
    case 'text':
      inputValue = inputText(term, definition)
      break
    default:
      throw new Error(`${type} is not defined.`)
  }
  checkValue(inputValue)
  return inputValue
}

const checkValue = (value) => {
  // TODO
}

const replaceTerms = (program, template, definitions, terms) => {
  if (_.isEmpty(terms)) {
    return template
  } else {
    const term = terms[0]
    const definition = definitions[term]
    template = replaceTerm(program, template, definition, term)
    return replaceTerms(program, template, definitions, _.tail(terms))
  }
}

const replaceTerm = (program, template, definition, term) => {
  let value = program[term]

  if (program.interactive) {
    if (_.isUndefined(value)) {
      if (definition.required || !program.skipOptions) {
        value = input(term, definition)
      } else {
        value = ''
      }
      while (definition.required && _.isEmpty(value)) {
        console.log(`${warningColor}${term} is required${reset}`)
        value = input(term, definition)
      }
    }
  } else {
    if (_.isEmpty(value) && definition.required) throw new Error(`${term} is required.`)
  }

  let decoratedValue = value
  if (!_.isEmpty(value)) {
    if (definition.prefix) decoratedValue = definition.prefix + decoratedValue
    if (definition.suffix) decoratedValue = decoratedValue + definition.suffix
  }

  return _.replace(template, `<${term}>`, decoratedValue)
}

const gitCommit = (commitMessage, duet = false, dryRun = false) => {
  if (dryRun) {
    console.log("-------------------------")
    console.log(commitMessage)
    console.log("-------------------------")
  } else if (duet) {
    execSync(`git duet-commit -m "${commitMessage}"`)
  } else {
    execSync(`git commit -m "${commitMessage}"`)
  }
}

const main = (program, template, definitions, terms) => {
  const commitMessage = replaceTerms(program, template, definitions, terms)
  gitCommit(commitMessage.trim(), program.duet, program.dryRun)
}

//
// Main
//
try {
  const rootPath = projectRoot === "" ? process.env.HOME : projectRoot
  const templateFilePath = path.join(rootPath, templateFileName)
  const definitionsFilePath = path.join(rootPath, definitionsFileName)
  const template = fs.readFileSync(templateFilePath, 'utf8')
  const definitions = loadDefinitions(definitionsFilePath)
  const terms = _.keys(definitions)

  main(createProgram(program, definitions, terms), template, definitions, terms)
} catch (e) {
  console.error(`${errorColor}${e.message}${reset}`)
}
